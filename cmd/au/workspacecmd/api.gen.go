// Package workspacecmd provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package workspacecmd

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Problem An https://datatracker.ietf.org/doc/html/rfc9457 Problem response.
type Problem struct {
	// Detail A longer human-readable explanation specific to this occurrence of the Problem.
	Detail string `json:"detail"`

	// Instance A URI reference that identifies the specific occurrence of the Problem.
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code generated by the origin server for this occurrence of the Problem.
	Status int `json:"status"`

	// Title A short human-readable summary of the problem type.
	Title string `json:"title"`

	// Type A URI reference that identifies the problem type or class.
	Type string `json:"type"`
}

// Workspace defines model for Workspace.
type Workspace struct {
	Alias       string    `json:"alias"`
	CreatedAt   time.Time `json:"created_at"`
	Id          string    `json:"id"`
	SizeInBytes int       `json:"size_in_bytes"`
}

// StandardBadRequestProblem An https://datatracker.ietf.org/doc/html/rfc9457 Problem response.
type StandardBadRequestProblem = Problem

// StandardNotFoundProblem An https://datatracker.ietf.org/doc/html/rfc9457 Problem response.
type StandardNotFoundProblem = Problem

// StandardProblemResponse An https://datatracker.ietf.org/doc/html/rfc9457 Problem response.
type StandardProblemResponse = Problem

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListWorkspace request
	ListWorkspace(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspace request
	GetWorkspace(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SynchroniseWorkspaceDocument request
	SynchroniseWorkspaceDocument(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadWorkspaceDocument request
	DownloadWorkspaceDocument(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListWorkspace(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkspaceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspace(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspaceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SynchroniseWorkspaceDocument(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSynchroniseWorkspaceDocumentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadWorkspaceDocument(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadWorkspaceDocumentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListWorkspaceRequest generates requests for ListWorkspace
func NewListWorkspaceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspaceRequest generates requests for GetWorkspace
func NewGetWorkspaceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSynchroniseWorkspaceDocumentRequest generates requests for SynchroniseWorkspaceDocument
func NewSynchroniseWorkspaceDocumentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/actions/sync", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadWorkspaceDocumentRequest generates requests for DownloadWorkspaceDocument
func NewDownloadWorkspaceDocumentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/document", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListWorkspaceWithResponse request
	ListWorkspaceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListWorkspaceResponse, error)

	// GetWorkspaceWithResponse request
	GetWorkspaceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkspaceResponse, error)

	// SynchroniseWorkspaceDocumentWithResponse request
	SynchroniseWorkspaceDocumentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SynchroniseWorkspaceDocumentResponse, error)

	// DownloadWorkspaceDocumentWithResponse request
	DownloadWorkspaceDocumentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DownloadWorkspaceDocumentResponse, error)
}

type ListWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Workspace
	JSON400      *StandardBadRequestProblem
	JSON404      *StandardNotFoundProblem
	JSONDefault  *StandardProblemResponse
}

// Status returns HTTPResponse.Status
func (r ListWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
	JSON400      *StandardBadRequestProblem
	JSON404      *StandardNotFoundProblem
	JSONDefault  *StandardProblemResponse
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SynchroniseWorkspaceDocumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *StandardBadRequestProblem
	JSON404      *StandardNotFoundProblem
	JSONDefault  *StandardProblemResponse
}

// Status returns HTTPResponse.Status
func (r SynchroniseWorkspaceDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SynchroniseWorkspaceDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadWorkspaceDocumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *StandardBadRequestProblem
	JSON404      *StandardNotFoundProblem
	JSONDefault  *StandardProblemResponse
}

// Status returns HTTPResponse.Status
func (r DownloadWorkspaceDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadWorkspaceDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListWorkspaceWithResponse request returning *ListWorkspaceResponse
func (c *ClientWithResponses) ListWorkspaceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListWorkspaceResponse, error) {
	rsp, err := c.ListWorkspace(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkspaceResponse(rsp)
}

// GetWorkspaceWithResponse request returning *GetWorkspaceResponse
func (c *ClientWithResponses) GetWorkspaceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetWorkspaceResponse, error) {
	rsp, err := c.GetWorkspace(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceResponse(rsp)
}

// SynchroniseWorkspaceDocumentWithResponse request returning *SynchroniseWorkspaceDocumentResponse
func (c *ClientWithResponses) SynchroniseWorkspaceDocumentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SynchroniseWorkspaceDocumentResponse, error) {
	rsp, err := c.SynchroniseWorkspaceDocument(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSynchroniseWorkspaceDocumentResponse(rsp)
}

// DownloadWorkspaceDocumentWithResponse request returning *DownloadWorkspaceDocumentResponse
func (c *ClientWithResponses) DownloadWorkspaceDocumentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DownloadWorkspaceDocumentResponse, error) {
	rsp, err := c.DownloadWorkspaceDocument(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadWorkspaceDocumentResponse(rsp)
}

// ParseListWorkspaceResponse parses an HTTP response from a ListWorkspaceWithResponse call
func ParseListWorkspaceResponse(rsp *http.Response) (*ListWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest StandardBadRequestProblem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest StandardNotFoundProblem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest StandardProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetWorkspaceResponse parses an HTTP response from a GetWorkspaceWithResponse call
func ParseGetWorkspaceResponse(rsp *http.Response) (*GetWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest StandardBadRequestProblem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest StandardNotFoundProblem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest StandardProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSynchroniseWorkspaceDocumentResponse parses an HTTP response from a SynchroniseWorkspaceDocumentWithResponse call
func ParseSynchroniseWorkspaceDocumentResponse(rsp *http.Response) (*SynchroniseWorkspaceDocumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SynchroniseWorkspaceDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest StandardBadRequestProblem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest StandardNotFoundProblem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest StandardProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDownloadWorkspaceDocumentResponse parses an HTTP response from a DownloadWorkspaceDocumentWithResponse call
func ParseDownloadWorkspaceDocumentResponse(rsp *http.Response) (*DownloadWorkspaceDocumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadWorkspaceDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest StandardBadRequestProblem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest StandardNotFoundProblem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest StandardProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /workspaces)
	ListWorkspace(ctx echo.Context) error

	// (GET /workspaces/{id})
	GetWorkspace(ctx echo.Context, id string) error

	// (GET /workspaces/{id}/actions/sync)
	SynchroniseWorkspaceDocument(ctx echo.Context, id string) error

	// (GET /workspaces/{id}/document)
	DownloadWorkspaceDocument(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListWorkspace converts echo context to params.
func (w *ServerInterfaceWrapper) ListWorkspace(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListWorkspace(ctx)
	return err
}

// GetWorkspace converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkspace(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorkspace(ctx, id)
	return err
}

// SynchroniseWorkspaceDocument converts echo context to params.
func (w *ServerInterfaceWrapper) SynchroniseWorkspaceDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SynchroniseWorkspaceDocument(ctx, id)
	return err
}

// DownloadWorkspaceDocument converts echo context to params.
func (w *ServerInterfaceWrapper) DownloadWorkspaceDocument(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DownloadWorkspaceDocument(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/workspaces", wrapper.ListWorkspace)
	router.GET(baseURL+"/workspaces/:id", wrapper.GetWorkspace)
	router.GET(baseURL+"/workspaces/:id/actions/sync", wrapper.SynchroniseWorkspaceDocument)
	router.GET(baseURL+"/workspaces/:id/document", wrapper.DownloadWorkspaceDocument)

}

type StandardBadRequestProblemJSONResponse Problem

type StandardNotFoundProblemJSONResponse Problem

type StandardProblemResponseJSONResponse Problem

type ListWorkspaceRequestObject struct {
}

type ListWorkspaceResponseObject interface {
	VisitListWorkspaceResponse(w http.ResponseWriter) error
}

type ListWorkspace200JSONResponse []Workspace

func (response ListWorkspace200JSONResponse) VisitListWorkspaceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkspace400JSONResponse struct {
	StandardBadRequestProblemJSONResponse
}

func (response ListWorkspace400JSONResponse) VisitListWorkspaceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkspace404JSONResponse struct {
	StandardNotFoundProblemJSONResponse
}

func (response ListWorkspace404JSONResponse) VisitListWorkspaceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkspacedefaultJSONResponse struct {
	Body       Problem
	StatusCode int
}

func (response ListWorkspacedefaultJSONResponse) VisitListWorkspaceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetWorkspaceRequestObject struct {
	Id string `json:"id"`
}

type GetWorkspaceResponseObject interface {
	VisitGetWorkspaceResponse(w http.ResponseWriter) error
}

type GetWorkspace200JSONResponse Workspace

func (response GetWorkspace200JSONResponse) VisitGetWorkspaceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkspace400JSONResponse struct {
	StandardBadRequestProblemJSONResponse
}

func (response GetWorkspace400JSONResponse) VisitGetWorkspaceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkspace404JSONResponse struct {
	StandardNotFoundProblemJSONResponse
}

func (response GetWorkspace404JSONResponse) VisitGetWorkspaceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkspacedefaultJSONResponse struct {
	Body       Problem
	StatusCode int
}

func (response GetWorkspacedefaultJSONResponse) VisitGetWorkspaceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SynchroniseWorkspaceDocumentRequestObject struct {
	Id string `json:"id"`
}

type SynchroniseWorkspaceDocumentResponseObject interface {
	VisitSynchroniseWorkspaceDocumentResponse(w http.ResponseWriter) error
}

type SynchroniseWorkspaceDocument101ApplicationoctetStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response SynchroniseWorkspaceDocument101ApplicationoctetStreamResponse) VisitSynchroniseWorkspaceDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/octet-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(101)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type SynchroniseWorkspaceDocument400JSONResponse struct {
	StandardBadRequestProblemJSONResponse
}

func (response SynchroniseWorkspaceDocument400JSONResponse) VisitSynchroniseWorkspaceDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SynchroniseWorkspaceDocument404JSONResponse struct {
	StandardNotFoundProblemJSONResponse
}

func (response SynchroniseWorkspaceDocument404JSONResponse) VisitSynchroniseWorkspaceDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type SynchroniseWorkspaceDocumentdefaultJSONResponse struct {
	Body       Problem
	StatusCode int
}

func (response SynchroniseWorkspaceDocumentdefaultJSONResponse) VisitSynchroniseWorkspaceDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DownloadWorkspaceDocumentRequestObject struct {
	Id string `json:"id"`
}

type DownloadWorkspaceDocumentResponseObject interface {
	VisitDownloadWorkspaceDocumentResponse(w http.ResponseWriter) error
}

type DownloadWorkspaceDocument200ApplicationoctetStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response DownloadWorkspaceDocument200ApplicationoctetStreamResponse) VisitDownloadWorkspaceDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/octet-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type DownloadWorkspaceDocument400JSONResponse struct {
	StandardBadRequestProblemJSONResponse
}

func (response DownloadWorkspaceDocument400JSONResponse) VisitDownloadWorkspaceDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DownloadWorkspaceDocument404JSONResponse struct {
	StandardNotFoundProblemJSONResponse
}

func (response DownloadWorkspaceDocument404JSONResponse) VisitDownloadWorkspaceDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DownloadWorkspaceDocumentdefaultJSONResponse struct {
	Body       Problem
	StatusCode int
}

func (response DownloadWorkspaceDocumentdefaultJSONResponse) VisitDownloadWorkspaceDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /workspaces)
	ListWorkspace(ctx context.Context, request ListWorkspaceRequestObject) (ListWorkspaceResponseObject, error)

	// (GET /workspaces/{id})
	GetWorkspace(ctx context.Context, request GetWorkspaceRequestObject) (GetWorkspaceResponseObject, error)

	// (GET /workspaces/{id}/actions/sync)
	SynchroniseWorkspaceDocument(ctx context.Context, request SynchroniseWorkspaceDocumentRequestObject) (SynchroniseWorkspaceDocumentResponseObject, error)

	// (GET /workspaces/{id}/document)
	DownloadWorkspaceDocument(ctx context.Context, request DownloadWorkspaceDocumentRequestObject) (DownloadWorkspaceDocumentResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListWorkspace operation middleware
func (sh *strictHandler) ListWorkspace(ctx echo.Context) error {
	var request ListWorkspaceRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListWorkspace(ctx.Request().Context(), request.(ListWorkspaceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListWorkspace")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListWorkspaceResponseObject); ok {
		return validResponse.VisitListWorkspaceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetWorkspace operation middleware
func (sh *strictHandler) GetWorkspace(ctx echo.Context, id string) error {
	var request GetWorkspaceRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkspace(ctx.Request().Context(), request.(GetWorkspaceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWorkspace")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetWorkspaceResponseObject); ok {
		return validResponse.VisitGetWorkspaceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SynchroniseWorkspaceDocument operation middleware
func (sh *strictHandler) SynchroniseWorkspaceDocument(ctx echo.Context, id string) error {
	var request SynchroniseWorkspaceDocumentRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SynchroniseWorkspaceDocument(ctx.Request().Context(), request.(SynchroniseWorkspaceDocumentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SynchroniseWorkspaceDocument")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SynchroniseWorkspaceDocumentResponseObject); ok {
		return validResponse.VisitSynchroniseWorkspaceDocumentResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DownloadWorkspaceDocument operation middleware
func (sh *strictHandler) DownloadWorkspaceDocument(ctx echo.Context, id string) error {
	var request DownloadWorkspaceDocumentRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DownloadWorkspaceDocument(ctx.Request().Context(), request.(DownloadWorkspaceDocumentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DownloadWorkspaceDocument")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DownloadWorkspaceDocumentResponseObject); ok {
		return validResponse.VisitDownloadWorkspaceDocumentResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
